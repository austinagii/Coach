package main

import (
	"aisu.ai/api/v2/cmd/server/shared/api"
	"aisu.ai/api/v2/internal/assistant"
	"aisu.ai/api/v2/internal/chat"
	"encoding/json"
	"fmt"
	"github.com/gin-gonic/gin"
	"log/slog"
	"net/http"
)

const (
	chatNotFound api.ErrorCode = "chat_not_found"
)

type NewChatRequest struct {
	UserID string         `json:"user_id"`
	Task   assistant.Task `json:"task"`
}

func (request *NewChatRequest) UnmarshalJSON(data []byte) error {
	var tempRequest struct {
		UserID string          `json:"user_id"`
		Task   json.RawMessage `json:"task"`
	}
	if err := json.Unmarshal(data, &tempRequest); err != nil {
		return err
	}

	var tempTask struct {
		Objective assistant.Objective `json:"objective"`
	}
	if err := json.Unmarshal(tempRequest.Task, &tempTask); err != nil {
		return err
	}

	switch tempTask.Objective {
	case assistant.ObjectiveGoalCreation:
		task := &assistant.GoalCreationTask{}
		if err := json.Unmarshal(tempRequest.Task, task); err != nil {
			return err
		}
		request.UserID = tempRequest.UserID
		request.Task = task
	case assistant.ObjectiveMilestoneCreation:
		task := &assistant.MilestoneCreationTask{}
		if err := json.Unmarshal(tempRequest.Task, task); err != nil {
			return err
		}
		request.UserID = tempRequest.UserID
		request.Task = task
	default:
		return fmt.Errorf("Objective '%s' not supported", tempTask.Objective)
	}
	return nil
}

type NewChatResponse struct {
	Id      string `json:"id"`
	Content string `json:"content"`
}

// HandleNewChatRequest processes an HTTP request to create a new chat returning
// the chat prompt generated by the assistant as a JSON response and the chat
// id in the location header.
func CreateChat(context *gin.Context) {
	request := &NewChatRequest{}
	if err := context.BindJSON(&request); err != nil {
		errMsg := "An error occurred while unmarshalling the request body to a new chat request"
		api.BindApiErrorResponse(context, errMsg, http.StatusBadRequest, api.ErrorCodeBadRequest, err)
		return
	}

	user, err := userRepository.Get(request.UserID)
	if err != nil {
		errMsg := "An error occurred while retrieving the user associated with the chat"
		api.BindApiErrorResponse(context, errMsg, http.StatusInternalServerError, api.ErrorCodeGeneralError, err)
		return
	}
	// Since each chat is tied to a single assistant, to start a new chat we will
	// create a new assistant.
	assistant, err := assistant.NewAssistant(user, request.Task, openaiClient, nil)
	if err != nil {
		errMsg := "An error occurred while creating a new chat assistant"
		api.BindApiErrorResponse(context, errMsg, http.StatusInternalServerError, api.ErrorCodeGeneralError, err)
		return
	}

	assistant, err = assistantRepository.Save(assistant)
	if err != nil {
		errMsg := "An error occurred while creating the chat"
		api.BindApiErrorResponse(context, errMsg, http.StatusInternalServerError, api.ErrorCodeGeneralError, err)
		return
	}

	context.IndentedJSON(http.StatusCreated, &NewChatResponse{
		Id:      assistant.Id,
		Content: assistant.Chat.Messages[0].Content,
	})
	responseHeaders := map[string]string{"Location": "https://api.superu.ai/v1/chat/%s"}
	if err := context.BindHeader(responseHeaders); err != nil {
		errMsg := "An error occurred while binding the HTTP headers"
		api.BindApiErrorResponse(context, errMsg, http.StatusInternalServerError, api.ErrorCodeGeneralError, err)
	}
}

type ChatRequest struct {
	UserID string `json:"user_id"`
	Text   string `json:"text"`
}

func HandleUserMessage(context *gin.Context) {
	slog.Debug("Received a new message from a user")
	request := &ChatRequest{}
	if err := context.BindJSON(request); err != nil {
		errMsg := "An error occurred while unmarshalling the request body to a chat message"
		api.BindApiErrorResponse(context, errMsg, http.StatusBadRequest, api.ErrorCodeBadRequest, err)
	}

	user, err := userRepository.Get(request.UserID)
	if err != nil {
		errMsg := "An error occurred while retrieving the user associated with the chat"
		api.BindApiErrorResponse(context, errMsg, http.StatusInternalServerError, api.ErrorCodeGeneralError, err)
	}

	chatId := context.Param("id")
	if chatId == "" {
		errMsg := "No chat ID was specified in the request URI"
		slog.Error(errMsg)
		context.IndentedJSON(http.StatusNotFound, api.NewApiError(chatNotFound, errMsg))
	}
	// Remember that each chat is belongs to an assistant, so the id in the request is really the
	// assistant's id
	chatAssistant, err := assistantRepository.Get(chatId)
	if err != nil {
		errMsg := "An error occurred while loading the assistant state from the database"
		slog.Error(errMsg)
		context.IndentedJSON(http.StatusInternalServerError, api.NewApiError(api.ErrorCodeGeneralError, errMsg))
	}
	chatAssistant.Init(openaiClient, modelExchangeRepository)
	chatAssistant.User = user
	userMessage := chat.NewUserMessage(request.Text)
	assistantMessage, err := chatAssistant.Respond(userMessage)
	if err != nil {
		slog.Error("An error occurred while the assistant was responding: %v", err)
	}
	if _, err := assistantRepository.Update(chatAssistant, 2); err != nil {
		errMsg := "An error occurred while updating the user"
		api.BindApiErrorResponse(context, errMsg, http.StatusInternalServerError, api.ErrorCodeGeneralError, err)
	}
	if err := userRepository.Update(user); err != nil {
		errMsg := "An error occurred while updating the user"
		api.BindApiErrorResponse(context, errMsg, http.StatusInternalServerError, api.ErrorCodeGeneralError, err)
	}
	context.IndentedJSON(http.StatusOK, assistantMessage)
	return
}
